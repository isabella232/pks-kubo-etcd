package main

import (
	"flag"
	"log"
	"os"
	"time"

	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/application"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/client"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/cluster"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/command"

	"code.cloudfoundry.org/lager"
)

var (
	disableDelay string
)

type etcdfabFlags struct {
	Command            string
	ConfigFilePath     string
	LinkConfigFilePath string
}

func main() {
	flags := parseFlags()

	logger := lager.NewLogger("etcdfab")
	logger.RegisterSink(lager.NewWriterSink(os.Stdout, lager.INFO))

	commandWrapper := command.NewWrapper()
	etcdClient := client.NewEtcdClient(logger)
	clusterController := cluster.NewController(etcdClient, logger, sleep)

	app := application.New(application.NewArgs{
		Command:            commandWrapper,
		ConfigFilePath:     flags.ConfigFilePath,
		LinkConfigFilePath: flags.LinkConfigFilePath,
		EtcdClient:         etcdClient,
		ClusterController:  clusterController,
		OutWriter:          os.Stdout,
		ErrWriter:          os.Stderr,
		Logger:             logger,
	})

	switch os.Args[1] {
	case "start":
		err := app.Start()
		if err != nil {
			stderr := log.New(os.Stderr, "", 0)
			stderr.Printf("Error during start: %s", err)
			os.Exit(1)
		}
	case "stop":
		err := app.Stop()
		if err != nil {
			stderr := log.New(os.Stderr, "", 0)
			stderr.Printf("Error during stop: %s", err)
			os.Exit(1)
		}
	default:
		stderr := log.New(os.Stderr, "", 0)
		stderr.Printf("Usage: etcdfab COMMAND OPTIONS\n")
		stderr.Printf("COMMAND: \"start\" or \"stop\"")
		os.Exit(1)
	}
}

func parseFlags() etcdfabFlags {
	var flags etcdfabFlags
	flagSet := flag.NewFlagSet("flags", flag.ContinueOnError)
	flagSet.StringVar(&flags.ConfigFilePath, "config-file", "", "Path to the etcdfab config file. Generated by the etcd-release using BOSH deployment manifest properties.")
	flagSet.StringVar(&flags.LinkConfigFilePath, "config-link-file", "", "Path to the etcdfab link config file. This will override any properties with bosh links.")

	if len(os.Args) < 3 {
		stderr := log.New(os.Stderr, "", 0)
		stderr.Printf("Usage: etcdfab COMMAND OPTIONS")
		stderr.Printf("COMMAND: \"start\" or \"stop\"")
		stderr.Printf("OPTIONS:")
		flagSet.PrintDefaults()
		os.Exit(1)
	}

	if err := flagSet.Parse(os.Args[2:]); err != nil {
		os.Exit(1)
	}

	return flags
}

func sleep(duration time.Duration) {
	if disableDelay == "true" {
		return
	}

	time.Sleep(duration)
}
